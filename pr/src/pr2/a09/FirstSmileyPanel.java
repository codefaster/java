package pr2.a09;import java.awt.Color;import java.awt.Graphics;import java.awt.Point;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import javax.swing.JPanel;import javax.swing.JTextField;public class FirstSmileyPanel extends JPanel implements PropertyChangeListener {	protected int x;	protected int y;	protected int r;	protected int eyeSize;	protected int eyeAngle;	protected boolean isSmiling;	protected SmileyModel smileyModel;		public FirstSmileyPanel(SmileyModel smileyModel) {		this.smileyModel = smileyModel;		eyeSize = smileyModel.eyeSize;		eyeAngle = smileyModel.eyeAngle;		isSmiling = smileyModel.isSmiling;			this.r = smileyModel.r;		this.x = smileyModel.x;		this.y = smileyModel.y;	}	public void moveRelative(int dx, int dy) {		x += dx;		y += dy;	}	public void setPosition(int x, int y) {		this.x = x;		this.y = y;	}	private static class Geo extends Point {		public static Circle getShrinked(Circle c, int size) {			return new Circle(				c.x,				c.y,				c.r - size			);		}		public static void makeCenter(Circle c) {			c.x -= c.r;			c.y -= c.r;		}		public static void alignLeft(Circle c) {			c.x -= c.d;		}		public static void alignRight(Circle c) {			c.x += c.d;		}		public static void alignUp(Circle c) {			c.y -= c.d;		}		public static void alignDown(Circle c) {			c.y += c.d;		}		public static Circle getAbsRotation(Circle axisCircle, double angle, int radius) {			final int DEG_COMP = 90;			final Point CENTER = axisCircle.getCenter();			double angleD = (angle - DEG_COMP) * Math.PI / 180;			return new Circle(				(int) Math.round((CENTER.x + axisCircle.r * Math.cos(angleD))),				(int) Math.round((CENTER.y + axisCircle.r * Math.sin(angleD))),				radius			);		}	}		public void propertyChange(PropertyChangeEvent evt) {		if (evt.getPropertyName().equals(Command.MODEL_UPDATE.toString())) { 			 this.x = smileyModel.getX();			 this.y = smileyModel.getY();			 this.r = smileyModel.getRadius();			 this.eyeAngle = smileyModel.getEyeAngle();			 this.eyeSize = smileyModel.getEyeSize();			 this.isSmiling = smileyModel.isSmiling();			 repaint();		}	}		public void paintComponent(Graphics g) {		super.paintComponent(g);		g.setColor(Color.ORANGE);		Circle head = new Circle(x, y, r);		g.fillOval(head.x, head.y, head.getDiameter(), head.getDiameter());		// Draw Eyes		g.setColor(Color.WHITE);		Circle eye1 = Geo.getAbsRotation(head, 270 + 45, eyeSize);		Circle eye2 = Geo.getAbsRotation(head, 90-45, eyeSize);		Geo.alignLeft(eye2);		g.drawOval(eye1.x, eye1.y, eye1.getDiameter(), eye1.getDiameter());		g.drawOval(eye2.x, eye2.y, eye2.getDiameter(), eye2.getDiameter());		Circle eyeBall1 = Geo.getAbsRotation(Geo.getShrinked(eye1,eye1.r/2), eyeAngle, eyeSize - eyeSize / 2);		Circle eyeBall2 = Geo.getAbsRotation(Geo.getShrinked(eye2,eye2.r/2), eyeAngle,eyeSize - eyeSize / 2);		// Draw Eyeballs		g.fillOval(eyeBall1.x, eyeBall1.y, eyeBall1.getDiameter(), eyeBall1.getDiameter());		g.fillOval(eyeBall2.x, eyeBall2.y, eyeBall2.getDiameter(), eyeBall2.getDiameter());				if (isSmiling == true) {			g.drawArc(x+r/2,y+r, r-r/4,r/2, 180, 180);			} else {			g.drawArc(x+r/2,y+r, r-r/4,r/2, 0, 180);		}	}}
package pr2.a07;import java.awt.Color;import java.awt.Graphics;import java.awt.Point;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import javax.swing.JPanel;import javax.swing.JTextField;public class SmileyView extends JPanel implements PropertyChangeListener {	int x;	int y;	int r;	int eyeSize;	int eyeAngle;	boolean isSmiling;	protected SmileyModel smileyModel;	public SmileyView(SmileyModel smileyModel, int x, int y, int r, int eyeSize, int eyeAngle, boolean smile) {		this.r = r;		this.eyeSize = eyeSize * r / 100;		this.eyeAngle = eyeAngle;		this.isSmiling = smile;		this.x = x;		this.y = y;		this.smileyModel = smileyModel;//		add(new JTextField("This is the Rythm of the Night"));	}	public void moveRelative(int dx, int dy) {		x += dx;		y += dy;	}	public void setPosition(int x, int y) {		this.x = x;		this.y = y;	}	private class Geo extends Point {		public void shrink(Circle c, int size) {			c.x += size;			c.y += size;			c.r -= size;		}		public void makeCenter(Circle c) {			c.x -= c.r;			c.y -= c.r;		}		public void alignLeft(Circle c) {			c.x -= c.d;		}		public void alignRight(Circle c) {			c.x += c.d;		}		public void alignUp(Circle c) {			c.y -= c.d;		}		public void alignDown(Circle c) {			c.y += c.d;		}		public void compensateRotation(Circle c) {			if (c.rotation >= 0 && c.rotation <= 180) {				alignLeft(c);			}			if (c.rotation >= 180 && c.rotation <= 360) {			}		}		public void rotateRel(Circle c, Point axisPoint, int angle) {			double angleD = angle * Math.PI / 180;			c.x = (int) Math.round((Math.cos(angle) * (c.x - axisPoint.x)					- Math.sin(angleD) * (c.y - axisPoint.y) + axisPoint.x));			c.y = (int) Math.round((Math.sin(angle) * (c.x - axisPoint.x)					+ Math.cos(angleD) * (c.y - axisPoint.y) + axisPoint.y));		}		public void rotateAbs(Circle c, Circle axisCircle, int angle, boolean compensate) {			rotateAbs(c, axisCircle, angle);			if (compensate == true) {				compensateRotation(c);			}		}		public void rotateAbs(Circle c, Circle axisCircle, double angle) {			final int DEG_COMP = 90;			final Point CENTER = axisCircle.getCenter();			double angleD = (angle - DEG_COMP) * Math.PI / 180;			c.x = (int) Math					.round((CENTER.x + axisCircle.r * Math.cos(angleD)));			c.y = (int) Math					.round((CENTER.y + axisCircle.r * Math.sin(angleD)));			c.addRotation((int) angle);		}	}	public void propertyChange(PropertyChangeEvent evt) {		if (evt.getPropertyName() == "MODEL_UPDATE") {			 this.x = smileyModel.getX();			 this.y = smileyModel.getY();			 this.r = smileyModel.getR();			 this.eyeAngle = smileyModel.getEyeAngle();			 this.eyeSize = smileyModel.getEyeSize();			 this.isSmiling = smileyModel.getIsSmiling();		}	}		// IN CONSTRUCTION	public void paintComponent(Graphics g) {		g.setColor(Color.BLACK);		g.drawLine(x,y,r,eyeSize);	}	//	public void draw(Graphics g) {//		g.setColor(Color.BLACK);//		g.drawLine(0,0,300,200);//		super.paintComponent(g);		//		// Draw Head//		g.setColor(Color.ORANGE);//		Circle head = new Circle(x, y, r);//		g.fillOval(head.x, head.y, head.getD(), head.getD());//		// Draw Eyes//		g.setColor(Color.WHITE);//		Circle eye1 = new Circle(x, y, eyeSize);//		Circle eye2 = new Circle(x, y, eyeSize);//		// Determine Eye Location by Angle, EYE1,EYE2//		Geo.rotateAbs(eye1, head, 270 + 45);//		eye2.rotateAbs(eye2, head, 90 - 45);//		eye2.alignLeft(eye2);//		// Draw Eyes//		g.drawOval(eye1.x, eye1.y, eye1.getD(), eye1.getD());//		g.drawOval(eye2.x, eye2.y, eye2.getD(), eye2.getD());//		// Calc Eyeballs//		Circle eyeBall1 = new Circle(0, 0, eyeSize - eyeSize / 2);//		Circle eyeBall2 = new Circle(0, 0, eyeSize - eyeSize / 2);//		eyeBall1.rotateAbs(eye1, eyeAngle, true);//		eyeBall2.rotateAbs(eye2, eyeAngle, true);//		// Draw Eyeballs//		g.fillOval(eyeBall1.x, eyeBall1.y, eyeBall1.getD(), eyeBall1.getD());//		g.fillOval(eyeBall2.x, eyeBall2.y, eyeBall2.getD(), eyeBall2.getD());//		// Check Smile//		if (smile == true) {//			Circle smileCheat = new Circle(head.getCenter().x,//					head.getCenter().y, r / 2);//			Circle coverUp = new Circle(head.getCenter().x - head.r / 2,//					head.getCenter().y, r / 2);//			smileCheat.moveRelative(-r / 2, -10);//			g.fillOval(smileCheat.x, smileCheat.y, smileCheat.getD(),//					smileCheat.getD());//			g.setColor(Color.ORANGE);//			g.fillRect(coverUp.x, coverUp.y - r / 10, coverUp.getD(),//					coverUp.getD() / 2);//		} else {//			Circle coverUp = new Circle(head.getCenter().x - head.r / 2,//					head.getCenter().y, r / 2);//			coverUp.moveRelative(0, r / 2);//			g.fillRect(coverUp.x, coverUp.y - r / 10, coverUp.getD(),//					coverUp.getD() / 10);//		}//	}}
package pr2.a07;import java.awt.Color;import java.awt.Graphics;import java.awt.Point;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import javax.swing.JPanel;import javax.swing.JTextField;public class SmileyView extends JPanel implements PropertyChangeListener {	int x;	int y;	int r;	int eyeSize;	int eyeAngle;	boolean isSmiling;	protected SmileyModel smileyModel;	public SmileyView(SmileyModel smileyModel, int x, int y, int r, int eyeSize, int eyeAngle, boolean smile) {		this.smileyModel = smileyModel;		this.r = r;		this.eyeSize = eyeSize * r / 100;		this.eyeAngle = eyeAngle;		this.isSmiling = smile;		this.x = smileyModel.x;		this.y = y;	}	public void moveRelative(int dx, int dy) {		x += dx;		y += dy;	}	public void setPosition(int x, int y) {		this.x = x;		this.y = y;	}	private static class Geo extends Point {		public static Circle getShrinked(Circle c, int size) {			return new Circle(				c.x,				c.y,				c.r - size			);		}		public static void makeCenter(Circle c) {			c.x -= c.r;			c.y -= c.r;		}		public static void alignLeft(Circle c) {			c.x -= c.d;		}		public static void alignRight(Circle c) {			c.x += c.d;		}		public static void alignUp(Circle c) {			c.y -= c.d;		}		public static void alignDown(Circle c) {			c.y += c.d;		}		public static Circle getAbsRotation(Circle axisCircle, double angle, int radius) {			final int DEG_COMP = 90;			final Point CENTER = axisCircle.getCenter();			double angleD = (angle - DEG_COMP) * Math.PI / 180;			return new Circle(				(int) Math.round((CENTER.x + axisCircle.r * Math.cos(angleD))),				(int) Math.round((CENTER.y + axisCircle.r * Math.sin(angleD))),				radius			);		}	}	public void propertyChange(PropertyChangeEvent evt) {		if (evt.getPropertyName() == "MODEL_UPDATE") {			 this.x = smileyModel.getX();			 this.y = smileyModel.getY();			 this.r = smileyModel.getR();			 this.eyeAngle = smileyModel.getEyeAngle();			 this.eyeSize = smileyModel.getEyeSize();			 this.isSmiling = smileyModel.getIsSmiling();		}	}		// IN CONSTRUCTION	public void paintComponent(Graphics g) {		g.setColor(Color.BLACK);		g.drawLine(0,0,300,200);		super.paintComponent(g);				// Draw Head		g.setColor(Color.ORANGE);		Circle head = new Circle(x, y, r);		g.fillOval(head.x, head.y, head.getDiameter(), head.getDiameter());		// Draw Eyes		g.setColor(Color.WHITE);//		Circle eye1 = new Circle(x, y, eyeSize);//		Circle eye2 = new Circle(x, y, eyeSize);		// Determine Eye Location by Angle, EYE1,EYE2		Circle eye1 = Geo.getAbsRotation(head, 270 + 45, eyeSize);		Circle eye2 = Geo.getAbsRotation(head, 90-45, eyeSize);		Geo.alignLeft(eye2);		// Draw Eyes		g.drawOval(eye1.x, eye1.y, eye1.getDiameter(), eye1.getDiameter());		g.drawOval(eye2.x, eye2.y, eye2.getDiameter(), eye2.getDiameter());		// Calc Eyeballs		Circle eyeBall1 = Geo.getAbsRotation(Geo.getShrinked(eye1,5), eyeAngle, eyeSize - eyeSize / 2);		Circle eyeBall2 = Geo.getAbsRotation(Geo.getShrinked(eye2,5), eyeAngle,eyeSize - eyeSize / 2);		// Draw Eyeballs		g.fillOval(eyeBall1.x, eyeBall1.y, eyeBall1.getDiameter(), eyeBall1.getDiameter());		g.fillOval(eyeBall2.x, eyeBall2.y, eyeBall2.getDiameter(), eyeBall2.getDiameter());		// Check Smile//		if (isSmiling == true) {//			Circle smileCheat = new Circle(head.getCenter().x,//					head.getCenter().y, r / 2);//			Circle coverUp = new Circle(head.getCenter().x - head.r / 2,//					head.getCenter().y, r / 2);//			smileCheat.moveRelative(-r / 2, -10);//			g.fillOval(smileCheat.x, smileCheat.y, smileCheat.getDiameter(),//					smileCheat.getDiameter());//			g.setColor(Color.ORANGE);//			g.fillRect(coverUp.x, coverUp.y - r / 10, coverUp.getDiameter(),//					coverUp.getDiameter() / 2);//		} else {//			Circle coverUp = new Circle(head.getCenter().x - head.r / 2,//					head.getCenter().y, r / 2);//			coverUp.moveRelative(0, r / 2);//			g.fillRect(coverUp.x, coverUp.y - r / 10, coverUp.getDiameter(),//					coverUp.getDiameter() / 10);//		}	}}
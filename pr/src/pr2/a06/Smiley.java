package pr2.a06;import java.awt.Color;import java.awt.Graphics;import java.awt.Point;import lernhilfe2013ss.graphics.Drawable;public class Smiley implements Drawable {	int x;	int y;	int r;	int eyeSize;	int eyeAngle;	boolean smile;	public Smiley(int x, int y, int r, int eyeSize, int eyeAngle, boolean smile) {		this.r = r;		this.eyeSize = eyeSize * r / 100;		;		this.eyeAngle = eyeAngle;		this.smile = smile;		this.x = x;		this.y = y;	}	public void moveRelative(int dx, int dy) {		x += dx;		y += dy;	}	public void setPosition(int x, int y) {		this.x = x;		this.y = y;	}	public void draw(Graphics g) {		// Draw Head		g.setColor(Color.ORANGE);		Circle head = new Circle(x, y, r);		g.fillOval(head.x, head.y, head.getD(), head.getD());		// Draw Eyes		g.setColor(Color.WHITE);		Circle eye1 = new Circle(x, y, eyeSize);		Circle eye2 = new Circle(x, y, eyeSize);		// Determine Eye Location by Angle, EYE1,EYE2		eye1.rotateAbs(head, 270 + 45);		eye2.rotateAbs(head, 90 - 45);		eye2.alignLeft();		// Draw Eyes		g.drawOval(eye1.x, eye1.y, eye1.getD(), eye1.getD());		g.drawOval(eye2.x, eye2.y, eye2.getD(), eye2.getD());		// Calc Eyeballs		Circle eyeBall1 = new Circle(0, 0, eyeSize - eyeSize / 2);		Circle eyeBall2 = new Circle(0, 0, eyeSize - eyeSize / 2);		eyeBall1.rotateAbs(eye1, eyeAngle, true);		eyeBall2.rotateAbs(eye2, eyeAngle, true);		// Draw Eyeballs		g.fillOval(eyeBall1.x, eyeBall1.y, eyeBall1.getD(), eyeBall1.getD());		g.fillOval(eyeBall2.x, eyeBall2.y, eyeBall2.getD(), eyeBall2.getD());		// Check Smile		if (smile == true) {			Circle smileCheat = new Circle(head.getCenter().x, head.getCenter().y, r / 2);			Circle coverUp = new Circle(head.getCenter().x - head.r / 2, head.getCenter().y, r / 2);			smileCheat.moveRelative(-r / 2, -10);			g.fillOval(smileCheat.x, smileCheat.y, smileCheat.getD(), smileCheat.getD());			g.setColor(Color.ORANGE);			g.fillRect(coverUp.x, coverUp.y - r / 10, coverUp.getD(), coverUp.getD() / 2);		} else {			Circle coverUp = new Circle(head.getCenter().x - head.r / 2, head.getCenter().y, r / 2);			coverUp.moveRelative(0, r / 2);			g.fillRect(coverUp.x, coverUp.y - r / 10, coverUp.getD(), coverUp.getD() / 10);		}	}}